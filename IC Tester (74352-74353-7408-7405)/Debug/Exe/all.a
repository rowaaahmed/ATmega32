;/*******************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/31/2024
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <stdio.h>
;#include <delay.h>
;// Declare your global variables here
;
;unsigned char line[17];
;unsigned char x;
;signed char  j;
;unsigned char intr=0;     //Interrupt flag to indicate external interrupt occurrence
;int counter=0;           // Counter for counting interrupt events
;unsigned char  flag=0;    //flags for the IC tests
;unsigned char  flag2=0;
;unsigned char  flag3=0;
;unsigned char  flag4=0;
;unsigned char actual_output;      //to store the output values of the ICs
;unsigned char expected_output;    //to store the expected values from the ICs
;// External Interrupt 0 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 002D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002E // Place your code here
; 0000 002F     unsigned int i , l,k;
; 0000 0030     //delay to avoid debounce
; 0000 0031 
; 0000 0032         intr=1;      //interrupt flag is raised
;PCODE: $0000000F VOL: 0
;	i -> R16,R17
;	l -> R18,R19
;	k -> R20,R21
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0033         counter++;    //counter increment
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0034 
; 0000 0035 }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;void and_gate(){
; 0000 0036 void and_gate(){
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0037 
; 0000 0038     // Define pin mappings for the AND gate IC
; 0000 0039     #define INPUT1_1 0
; 0000 003A     #define INPUT2_1 1
; 0000 003B     #define OUTPUT1 2
; 0000 003C     #define INPUT1_2 3
; 0000 003D     #define INPUT2_2 4
; 0000 003E     #define OUTPUT2 5
; 0000 003F     #define GND 6
; 0000 0040 
; 0000 0041     #define VCC 0
; 0000 0042     #define INPUT1_3 1
; 0000 0043     #define INPUT2_3 2
; 0000 0044     #define OUTPUT3 3
; 0000 0045     #define INPUT1_4 4
; 0000 0046     #define INPUT2_4 5
; 0000 0047     #define OUTPUT4 6
; 0000 0048 
; 0000 0049 
; 0000 004A     unsigned char i = 0;
; 0000 004B     flag2=0;     // Reset error flag
;PCODE: $0000001C VOL: 0
;	i -> R17
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 004C 
; 0000 004D     // Configure pins as input or output for testing
; 0000 004E     DDRA |= (1<<INPUT1_1) | (1<<INPUT2_1) | (1<<INPUT1_2) | (1<<INPUT2_2) | (1<<GND);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004F     DDRC |= (1<<INPUT1_3) | (1<<INPUT2_3) | (1<<INPUT1_4) | (1<<INPUT2_4) | (1<<VCC);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0050 
; 0000 0051     DDRA &= ~(1<<OUTPUT1);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0052     DDRA &= ~(1<<OUTPUT2);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0053     DDRC &= ~(1<<OUTPUT3);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0054     DDRC &= ~(1<<OUTPUT4);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0055     PORTA |= (1<<OUTPUT1) | (1<<OUTPUT2) ;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0056     PORTC |= (1<<OUTPUT4)| (1<<OUTPUT3);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0057     PORTA &=~(1<<GND);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0058     PORTC |= (1<<VCC);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0059 
; 0000 005A     // Test Case 1: Apply HIGH to all inputs and test outputs
; 0000 005B     PORTA |= (1<<INPUT1_1) | (1<<INPUT2_1) | (1<<INPUT1_2) | (1<<INPUT2_2);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 005C     PORTC |= (1<<INPUT1_3) | (1<<INPUT2_3) | (1<<INPUT1_4) | (1<<INPUT2_4);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 005D     if ((PINA.OUTPUT1) != 1){
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005E         flag2=1;     // Output error
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005F     }
; 0000 0060     if ((PINA.OUTPUT2) != 1){
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0061         flag2=1;    // Output error
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0062     }
; 0000 0063     if ((PINC.OUTPUT3) != 1){
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0064         flag2=1;    // Output error
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0065     }
; 0000 0066     if ((PINC.OUTPUT4) != 1){
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0067         flag2=1;    // Output error
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0068     }
; 0000 0069 
; 0000 006A      // Test Case 2: Apply LOW to all inputs and test outputs
; 0000 006B     PORTA &= ~(1<<INPUT1_1) ;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 006C     PORTA &= ~(1<<INPUT2_1) ;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 006D     PORTA &= ~(1<<INPUT1_2) ;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 006E     PORTA &= ~(1<<INPUT2_2) ;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 006F 
; 0000 0070     PORTC &= ~(1<<INPUT1_3) ;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0071     PORTC &= ~(1<<INPUT2_3) ;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0072     PORTC &= ~(1<<INPUT1_4) ;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0073     PORTC &= ~(1<<INPUT2_4) ;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0074     if ((PINA.OUTPUT1) != 0){
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0075         flag2=1;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0076     }
; 0000 0077     if ((PINA.OUTPUT2) != 0){
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0078         flag2=1;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0079     }
; 0000 007A     if ((PINC.OUTPUT3) != 0){
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 007B         flag2=1;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 007C     }
; 0000 007D     if ((PINC.OUTPUT4) != 0){
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 007E         flag2=1;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 007F     }
; 0000 0080 
; 0000 0081     // Test Case 3: Apply one LOW input and one HIGH input and test outputs
; 0000 0082     PORTA |= (1<<INPUT1_1) | (1<<INPUT1_2);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0083     PORTA &= ~(1<<INPUT2_1);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0084     PORTA &= ~(1<<INPUT2_2);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0085 
; 0000 0086     PORTC |= (1<<INPUT1_3) | (1<<INPUT1_4);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0087     PORTC &= ~(1<<INPUT2_3);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0088     PORTC &= ~(1<<INPUT2_4);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0089 
; 0000 008A     if ((PINA.OUTPUT1) != 0){
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 008B         flag2=1;          // Output error
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 008C     }
; 0000 008D     if ((PINA.OUTPUT2) != 0){
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 008E         flag2=1;          // Output error
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 008F     }
; 0000 0090     if ((PINC.OUTPUT3) != 0){
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0091         flag2=1;         // Output error
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0092     }
; 0000 0093     if ((PINC.OUTPUT4) != 0){
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0094         flag2=1;         // Output error
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0095     }
; 0000 0096 
; 0000 0097 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;void not_gate(){
; 0000 0098 void not_gate(){
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0099 
; 0000 009A     // Define pin mappings for the NOT gate IC
; 0000 009B     #define INPUT1 0
; 0000 009C     #define OUTPUT1 1
; 0000 009D     #define INPUT2 2
; 0000 009E     #define OUTPUT2 3
; 0000 009F     #define INPUT3 4
; 0000 00A0     #define OUTPUT3 5
; 0000 00A1     #define INPUT4 1
; 0000 00A2     #define OUTPUT4 2
; 0000 00A3     #define GND 6
; 0000 00A4     #define INPUT5 3
; 0000 00A5     #define OUTPUT5 4
; 0000 00A6     #define INPUT6 5
; 0000 00A7     #define OUTPUT6 6
; 0000 00A8     #define VCC 0
; 0000 00A9 
; 0000 00AA 
; 0000 00AB     flag3=0;       // Reset error flag
;PCODE: $000000A9 VOL: 0
; 0000 00AC 
; 0000 00AD     // Configure pins as input or output for testing
; 0000 00AE     DDRA |= (1<<INPUT1) | (1<<INPUT2) | (1<<INPUT3) | (1<<GND);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00AF     DDRC |= (1<<INPUT4) | (1<<INPUT5) | (1<<INPUT6) | (1<<VCC);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00B0 
; 0000 00B1     DDRA &= ~(1<<OUTPUT1);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00B2     DDRA &= ~(1<<OUTPUT2);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00B3     DDRA &= ~(1<<OUTPUT3);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00B4     DDRC &= ~(1<<OUTPUT4);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B5     DDRC &= ~(1<<OUTPUT5);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00B6     DDRC &= ~(1<<OUTPUT6);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00B7     PORTA |= ( 1 << OUTPUT1) | ( 1 << OUTPUT2) | ( 1 << OUTPUT3);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00B8     PORTC |= ( 1 << OUTPUT4) | ( 1 << OUTPUT5) | ( 1 << OUTPUT6);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00B9     PORTA &= ~(1<<GND);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00BA     PORTC |= (1<<VCC);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00BB 
; 0000 00BC      // Test Case 1: Apply LOW to all inputs and test outputs
; 0000 00BD     PORTA &= ~((1 << INPUT1) | (1 << INPUT2) | (1 << INPUT3));
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00BE     PORTC &= ~((1 << INPUT4) | (1 << INPUT5) | (1 << INPUT6));
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00BF 
; 0000 00C0     actual_output =
; 0000 00C1         (((PINA >> 1) & 0x01) << 0) |
; 0000 00C2         (((PINA >> 3) & 0x01) << 1) |
; 0000 00C3         (((PINA >> 5) & 0x01) << 2) |
; 0000 00C4         (((PINC >> 2) & 0x01) << 3) |
; 0000 00C5         (((PINC >> 4) & 0x01) << 4) |
; 0000 00C6         (((PINC >> 6) & 0x01) << 5);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00C7     expected_output = 0x3F;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00C8     if (actual_output != expected_output) {   //to check if all outputs are HIGH
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00C9         flag3=1;     // Output error
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00CA     }
; 0000 00CB     delay_ms(10);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00CC 
; 0000 00CD      // Test Case 2: Apply HIGH to all inputs and test outputs
; 0000 00CE     PORTA |= ((1 << INPUT1) | (1 << INPUT2) | (1 << INPUT3));
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00CF     PORTC |= ((1 << INPUT4) | (1 << INPUT5) | (1 << INPUT6));
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00D0     actual_output =
; 0000 00D1         (((PINA >> 1) & 0x01) << 0) |
; 0000 00D2         (((PINA >> 3) & 0x01) << 1) |
; 0000 00D3         (((PINA >> 5) & 0x01) << 2) |
; 0000 00D4         (((PINC >> 2) & 0x01) << 3) |
; 0000 00D5         (((PINC >> 4) & 0x01) << 4) |
; 0000 00D6         (((PINC >> 6) & 0x01) << 5);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00D7     expected_output = 0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00D8     if (actual_output != expected_output) {        //to check if all outputs are LOW
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00D9         flag3=1;      // Output error
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00DA     }
; 0000 00DB }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;void firstmux_ic(){
; 0000 00DC void firstmux_ic(){
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00DD     // Define pin positions
; 0000 00DE     #define STROBE1 0
; 0000 00DF     #define INPUTB 1
; 0000 00E0     #define INPUT3 2
; 0000 00E1     #define INPUT2 3
; 0000 00E2     #define INPUT1 4
; 0000 00E3     #define INPUT0 5
; 0000 00E4     #define OUTPUTQ 6
; 0000 00E5     #define GND 7
; 0000 00E6 
; 0000 00E7     #define OUTPUTQ_2 7
; 0000 00E8     #define INPUT0_2 6
; 0000 00E9     #define INPUT1_2 5
; 0000 00EA     #define INPUT2_2 4
; 0000 00EB     #define INPUT3_2 3
; 0000 00EC     #define INPUTA 2
; 0000 00ED     #define STROBE2 1
; 0000 00EE     #define VCC 0
; 0000 00EF 
; 0000 00F0 
; 0000 00F1     unsigned char inputs[14] = {STROBE1, INPUTB, INPUT3, INPUT2, INPUT1, INPUT0, GND, INPUT0_2, INPUT1_2, INPUT2_2, INPU ...
; 0000 00F2     unsigned char outputs[2] = {OUTPUTQ, OUTPUTQ_2};
; 0000 00F3 
; 0000 00F4     unsigned char i,temp;
; 0000 00F5     unsigned char d;
; 0000 00F6 
; 0000 00F7     flag=0;       // Reset error flag
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;	inputs -> Y+6
;	outputs -> Y+4
;	i -> R17
;	temp -> R16
;	d -> R19
;PCODE: $00000143 VOL: 0
; 0000 00F8 
; 0000 00F9     DDRA=0;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00FA     DDRC=0;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00FB 
; 0000 00FC     // Configure inputs
; 0000 00FD     DDRA &= ~(1 << OUTPUTQ);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00FE     DDRC &= ~(1 << OUTPUTQ_2);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00FF     PORTA |= (1<<OUTPUTQ);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0100     PORTC |= (1<<OUTPUTQ_2);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0101 
; 0000 0102     DDRA |= (1 << STROBE1) | (1 << INPUTB) | (1 << INPUT3) | (1 << INPUT2) | (1 << INPUT1) | (1 << INPUT0) | (1 << GND);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0103     DDRC |= (1 << INPUT0_2) | (1 << INPUT1_2) | (1 << INPUT2_2) | (1 << INPUT3_2) | (1 << INPUTA) | (1 << STROBE2) | (1  ...
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0104 
; 0000 0105     PORTA = 0;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0106     PORTC = 0;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0107     PORTA &= ~(1<<GND);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0108     PORTC |= (1<<VCC);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0109     PORTA |= (1<<STROBE1);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 010A     PORTC |= (1<<STROBE2);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 010B 
; 0000 010C     // Assign input values (use separate variables or arrays for runtime values)
; 0000 010D     d = 0b1001;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 010E     for (i=0; i<2; i++){
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 010F 
; 0000 0110         //diffrent configurations depending on the value tested with
; 0000 0111         //start with first 4 inputs
; 0000 0112         if (d==9){
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0113             PORTA |= (1<< INPUT3) | (1<< INPUT0) ;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0114             PORTA &= ~(1<< INPUT2);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0115             PORTA &= ~(1<< INPUT1) ;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0116         }
; 0000 0117         else {
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0118             PORTA &= ~(1<< INPUT3) ;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0119             PORTA &= ~(1<< INPUT0) ;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 011A             PORTA |= (1<< INPUT2) | (1<< INPUT1) ;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 011B         }
;PCODE: $00000180 VOL: 0
; 0000 011C 
; 0000 011D         x=0;
;PCODE: $00000181 VOL: 0
; 0000 011E         //Enable A and B pins of IC
; 0000 011F         PORTA |= (1<<INPUTB) ;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0120         PORTC |= (1<< INPUTA);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0121         PORTA &= ~(1<<STROBE1);      //activate the inverted input
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0122         delay_ms(2);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0123         temp = (PINA.OUTPUTQ);      //store the output result
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0124         x = !temp;                  //store the complement of the output
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0125         PORTA |= (1<<STROBE1);       //deactivate the inverted input
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0126 
; 0000 0127         delay_ms(2);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0128         //Enable B and disable A
; 0000 0129         PORTA |= (1<<INPUTB) ;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 012A         PORTC &= ~(1<< INPUTA);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 012B         PORTA &= ~(1<<STROBE1);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 012C         delay_ms(2);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 012D         temp = (PINA.OUTPUTQ);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 012E         x = (x << 1) | (!temp);         //append to the variable the complement of the output
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 012F         PORTA |= (1<<STROBE1);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0130 
; 0000 0131         delay_ms(2);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0132         //Enable A and disable B
; 0000 0133         PORTA &= ~(1<<INPUTB) ;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0134         PORTC |= (1<< INPUTA);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0135         PORTA &= ~(1<<STROBE1);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0136         delay_ms(2);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0137         temp = (PINA.OUTPUTQ);
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0138         x = (x << 1) | (!temp);        //append to the variable the complement of the output
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0139         PORTA |= (1<<STROBE1);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 013A 
; 0000 013B         delay_ms(2);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 013C         //Disable both
; 0000 013D         PORTA &= ~(1<<INPUTB) ;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 013E         PORTC &= ~(1<< INPUTA);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 013F         PORTA &= ~(1<<STROBE1);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0140         delay_ms(2);
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0141         temp = (PINA.OUTPUTQ);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0142         x = (x << 1) | (!temp);        //append to the variable the complement of the output
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0143         PORTA |= (1<<STROBE1);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0144 
; 0000 0145         if (x != d){                  //Compare the values of the complement of the output with the input
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0146             flag=1;     // Output error
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0147             break;     //do not continue the loop
;PCODE: $000001E3 VOL: 0
; 0000 0148         }
; 0000 0149         d=0b0110;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 014A     }
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 014B 
; 0000 014C     d = 0b1001;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 014D     for (i=0; i<2; i++){
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 014E 
; 0000 014F         //Repeat the smae test for the second 4 inputs
; 0000 0150         if (d==9){
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0151             PORTC |= (1<< INPUT3_2) | (1<< INPUT0_2) ;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0152             PORTC &= ~(1<< INPUT2_2);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0153             PORTC &= ~(1<< INPUT1_2) ;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0154         }
; 0000 0155         else {
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0156             PORTC &= ~(1<< INPUT3_2) ;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0157             PORTC &= ~(1<< INPUT0_2) ;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0158             PORTC |= (1<< INPUT2_2) | (1<< INPUT1_2) ;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0159         }
;PCODE: $0000020A VOL: 0
; 0000 015A         x=0;
;PCODE: $0000020B VOL: 0
; 0000 015B 
; 0000 015C         PORTA |= (1<<INPUTB) ;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 015D         PORTC |= (1<< INPUTA);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 015E         PORTC &= ~(1<<STROBE2);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 015F         delay_ms(2);
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0160         temp = (PINC.OUTPUTQ_2);
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0161         x = !temp;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0162         PORTC |= (1<<STROBE2);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0163 
; 0000 0164         delay_ms(2);
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0165         PORTA |= (1<<INPUTB) ;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0166         PORTC &= ~(1<< INPUTA);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0167         PORTC &= ~(1<<STROBE2);
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0168         delay_ms(2);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0169         temp = (PINC.OUTPUTQ_2);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 016A         x = (x << 1) | (!temp);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 016B         PORTC |= (1<<STROBE2);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 016C 
; 0000 016D         delay_ms(2);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 016E         PORTA &= ~(1<<INPUTB) ;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 016F         PORTC |= (1<< INPUTA);
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0170         PORTC &= ~(1<<STROBE2);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0171         delay_ms(2);
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0172         temp = (PINC.OUTPUTQ_2);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0173         x = (x << 1) | (!temp);
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0174         PORTC |= (1<<STROBE2);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0175 
; 0000 0176         delay_ms(2);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0177         PORTA &= ~(1<<INPUTB) ;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0178         PORTC &= ~(1<< INPUTA);
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0179         PORTC &= ~(1<<STROBE2);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 017A         delay_ms(2);
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 017B         temp = (PINC.OUTPUTQ_2);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 017C         x = (x << 1) | (!temp);
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 017D         PORTC |= (1<<STROBE2);
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 017E 
; 0000 017F 
; 0000 0180         if (x != d){
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 0181             flag=1;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0182             break;
;PCODE: $0000026D VOL: 0
; 0000 0183         }
; 0000 0184         d=0b0110;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0185     }
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0186 
; 0000 0187 }
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;void secondmux_ic(){
; 0000 0188 void secondmux_ic(){
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0189     // Define pin positions
; 0000 018A     #define STROBE1 0
; 0000 018B     #define INPUTB 1
; 0000 018C     #define INPUT3 2
; 0000 018D     #define INPUT2 3
; 0000 018E     #define INPUT1 4
; 0000 018F     #define INPUT0 5
; 0000 0190     #define OUTPUTQ 6
; 0000 0191     #define GND 7
; 0000 0192 
; 0000 0193     #define OUTPUTQ_2 7
; 0000 0194     #define INPUT0_2 6
; 0000 0195     #define INPUT1_2 5
; 0000 0196     #define INPUT2_2 4
; 0000 0197     #define INPUT3_2 3
; 0000 0198     #define INPUTA 2
; 0000 0199     #define STROBE2 1
; 0000 019A     #define VCC 0
; 0000 019B 
; 0000 019C 
; 0000 019D     unsigned char inputs[14] = {STROBE1, INPUTB, INPUT3, INPUT2, INPUT1, INPUT0, GND, INPUT0_2, INPUT1_2, INPUT2_2, INPU ...
; 0000 019E     unsigned char outputs[2] = {OUTPUTQ, OUTPUTQ_2};
; 0000 019F 
; 0000 01A0     unsigned char i,temp;
; 0000 01A1     unsigned char d;
; 0000 01A2 
; 0000 01A3     flag4=0;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;	inputs -> Y+6
;	outputs -> Y+4
;	i -> R17
;	temp -> R16
;	d -> R19
;PCODE: $00000282 VOL: 0
; 0000 01A4     DDRA=0;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 01A5     DDRC=0;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 01A6 
; 0000 01A7     DDRA &= ~(1 << OUTPUTQ);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 01A8     DDRC &= ~(1 << OUTPUTQ_2);
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 01A9     PORTA |= (1<<OUTPUTQ);
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 01AA     PORTC |= (1<<OUTPUTQ_2);
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 01AB 
; 0000 01AC     // Configure inputs
; 0000 01AD 
; 0000 01AE     DDRA |= (1 << STROBE1) | (1 << INPUTB) | (1 << INPUT3) | (1 << INPUT2) | (1 << INPUT1) | (1 << INPUT0) | (1 << GND);
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 01AF     DDRC |= (1 << INPUT0_2) | (1 << INPUT1_2) | (1 << INPUT2_2) | (1 << INPUT3_2) | (1 << INPUTA) | (1 << STROBE2) | (1  ...
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 01B0 
; 0000 01B1 
; 0000 01B2     PORTA = 0;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 01B3     PORTC = 0;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 01B4     PORTA &= ~(1<<GND);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 01B5     PORTC |= (1<<VCC);
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 01B6     PORTA |= (1<<STROBE1);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 01B7     PORTC |= (1<<STROBE2);
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 01B8 
; 0000 01B9 
; 0000 01BA     //Change the direction of the output pin to be an output to the microcontroller
; 0000 01BB     DDRA |= (1<<OUTPUTQ);
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 01BC     PORTA |= (1<<OUTPUTQ);     //Write HIGH signal to it
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 01BD     DDRA &= ~(1<<OUTPUTQ);     //Invert again
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 01BE     PORTA |= (1<<OUTPUTQ);     //activate pull up
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 01BF     if (PINA.OUTPUTQ != 1){    //check if the output is HIGH
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 01C0         flag4=1;   // Output error
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 01C1     }
; 0000 01C2     //Repeat the same test with a LOW signal
; 0000 01C3     DDRA |= (1<<OUTPUTQ);
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 01C4     PORTA &= ~(1<<OUTPUTQ);
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 01C5     DDRA &= ~(1<<OUTPUTQ);
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 01C6     PORTA |= (1<<OUTPUTQ);
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 01C7     if (PINA.OUTPUTQ != 0){
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 01C8         flag4=1;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 01C9     }
; 0000 01CA 
; 0000 01CB     //Repeat the same test for the second output
; 0000 01CC     DDRC |= (1<<OUTPUTQ_2);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 01CD     PORTC |= (1<<OUTPUTQ_2);
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01CE     DDRC &= ~(1<<OUTPUTQ_2);
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01CF     PORTC |= (1<<OUTPUTQ_2);
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 01D0     if (PINC.OUTPUTQ_2 != 1)
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 01D1         flag4=1;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 01D2     DDRC |= (1<<OUTPUTQ_2);
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 01D3     PORTC &= ~(1<<OUTPUTQ_2);
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 01D4     DDRC &= ~(1<<OUTPUTQ_2);
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 01D5     PORTC |= (1<<OUTPUTQ_2);
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 01D6     if (PINC.OUTPUTQ != 0)
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01D7         flag4=1;
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 01D8 }
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;
;
;
;void main(void)
; 0000 01DD {
;PCODE: $000002DD VOL: 0
; 0000 01DE // Declare your local variables here
; 0000 01DF 
; 0000 01E0 // Input/Output Ports initialization
; 0000 01E1 // Port A initialization
; 0000 01E2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01E3 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 01E4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01E5 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 01E6 
; 0000 01E7 // Port B initialization
; 0000 01E8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01E9 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 01EA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01EB PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 01EC 
; 0000 01ED // Port C initialization
; 0000 01EE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01EF DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 01F0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01F1 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 01F2 
; 0000 01F3 // Port D initialization
; 0000 01F4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 01F5 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 01F6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01F7 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 01F8 
; 0000 01F9 // External Interrupt(s) initialization
; 0000 01FA // INT0: On
; 0000 01FB // INT0 Mode: Falling Edge
; 0000 01FC // INT1: Off
; 0000 01FD // INT2: Off
; 0000 01FE GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 01FF MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0200 MCUCSR=(0<<ISC2);
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 0201 GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0202 
; 0000 0203 // Alphanumeric LCD initialization
; 0000 0204 // Connections are specified in the
; 0000 0205 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0206 // RS - PORTD Bit 0
; 0000 0207 // RD - PORTD Bit 1
; 0000 0208 // EN - PORTD Bit 2
; 0000 0209 // D4 - PORTD Bit 4
; 0000 020A // D5 - PORTD Bit 5
; 0000 020B // D6 - PORTD Bit 6
; 0000 020C // D7 - PORTD Bit 7
; 0000 020D // Characters/line: 16
; 0000 020E lcd_init(16);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 020F 
; 0000 0210 // Global enable interrupts
; 0000 0211 #asm("sei")
;PCODE: $000002F9 VOL: 0
	sei
;PCODE: $000002FA VOL: 0
; 0000 0212 
; 0000 0213 lcd_init(16);
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0214 
; 0000 0215 while (1)
;PCODE: $000002FD VOL: 0
; 0000 0216       {
; 0000 0217       // Place your code here
; 0000 0218       lcd_init(16);        //LCD initialize
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 0219       lcd_clear();
;PCODE: $00000300 VOL: 0
; 0000 021A       while(intr==0){    //while no interrupt signal recieved
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 021B         lcd_gotoxy(0,0);
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 021C         sprintf(line, "ICs tested: %u", counter);       //print the number of tested ICs
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 021D         lcd_puts(line);
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 021E       }
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 021F       if (intr){
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 0220           lcd_clear();
;PCODE: $0000031A VOL: 0
; 0000 0221           lcd_gotoxy(0,0);
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0222           sprintf(line, "Testing the IC");
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0223           lcd_puts(line);
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 0224           delay_ms(500);
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 0225 
; 0000 0226           not_gate();                //call the NOT gate function
;PCODE: $0000032C VOL: 0
; 0000 0227           if (flag3==0){             // check the flag
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 0228             lcd_clear();
;PCODE: $0000032F VOL: 0
; 0000 0229             lcd_gotoxy(0,0);
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 022A             sprintf(line, "IC is 7405 ");      //if the flag is clear print the number of IC
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 022B             lcd_puts(line);
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 022C             delay_ms(2000);
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 022D           }
; 0000 022E 
; 0000 022F           and_gate();               //call the AND gate function
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0230           if (flag2==0){
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 0231             lcd_clear();
;PCODE: $00000345 VOL: 0
; 0000 0232             lcd_gotoxy(0,0);
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 0233             sprintf(line, "IC is 7408 ");
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 0234             lcd_puts(line);
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 0235             delay_ms(2000);
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 0236           }
; 0000 0237 
; 0000 0238           firstmux_ic();              //call the first mux function
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 0239           if (flag==0){               //to check the IC flag if clear
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 023A             secondmux_ic();           //call the second mux function as the are the same I/O test with an adddition to t ...
;PCODE: $0000035B VOL: 0
; 0000 023B             if (flag4==0){
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 023C                 lcd_clear();
;PCODE: $0000035E VOL: 0
; 0000 023D                 lcd_gotoxy(0,0);
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 023E                 sprintf(line, "IC is 74353 ");     //if the test passed without errors print on the LCD the no. of secon ...
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 023F                 lcd_puts(line);
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0000 0240                 delay_ms(2000);
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 0241             }
; 0000 0242             else{
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 0243                 lcd_clear();
;PCODE: $00000372 VOL: 0
; 0000 0244                 lcd_gotoxy(0,0);
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 0245                 sprintf(line, "IC is 74352 ");      //if not then the IC is the first one
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 0246                 lcd_puts(line);
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 0247                 delay_ms(2000);
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 0248             }
;PCODE: $00000384 VOL: 0
; 0000 0249           }
; 0000 024A 
; 0000 024B           if (flag==1 & flag2==1 & flag3==1 & flag4==1){          //if the IC is none of the ones listed
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 024C             lcd_clear();
;PCODE: $00000399 VOL: 0
; 0000 024D             lcd_gotoxy(0,0);
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 024E             sprintf(line, "IC not found ");                      //unkown IC msg appears
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 024F             lcd_puts(line);
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0250             delay_ms(2000);
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 0251           }
; 0000 0252           intr=0;                //clear the interrupt flag
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0000 0253       }
; 0000 0254 
; 0000 0255 
; 0000 0256       }
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 0257 }
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
